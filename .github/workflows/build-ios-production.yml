name: Build Production IPA

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - ad-hoc
        - app-store

jobs:
  build-production-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app for production
      run: npm run build
      
    - name: Setup Capacitor
      run: |
        npx cap sync ios
        
    - name: Setup Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install the Apple certificate and provisioning profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      if: env.BUILD_CERTIFICATE_BASE64 != ''
        
    - name: Install CocoaPods
      run: |
        cd ios/App
        pod install
        
    - name: Update version and build number
      run: |
        cd ios/App/App
        # Get version from package.json
        VERSION=$(node -p "require('../../../package.json').version")
        BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
        
        # Update Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $VERSION" Info.plist
        /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUMBER" Info.plist
        
    - name: Build iOS app
      run: |
        cd ios/App
        BUILD_TYPE="${{ github.event.inputs.build_type || 'development' }}"
        
        xcodebuild -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath App.xcarchive \
          archive
          
    - name: Export IPA
      run: |
        cd ios/App
        BUILD_TYPE="${{ github.event.inputs.build_type || 'development' }}"
        
        # Create export options plist based on build type
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>$BUILD_TYPE</string>
            <key>compileBitcode</key>
            <false/>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>teamID</key>
            <string>\${{ secrets.APPLE_TEAM_ID }}</string>
        </dict>
        </plist>
        EOF
        
        # Export the IPA
        xcodebuild -exportArchive \
          -archivePath App.xcarchive \
          -exportPath ./export \
          -exportOptionsPlist ExportOptions.plist
          
    - name: Upload Production IPA
      uses: actions/upload-artifact@v4
      with:
        name: ScanEats-iOS-Production-${{ github.event.inputs.build_type || 'development' }}
        path: ios/App/export/*.ipa
        retention-days: 90
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ios/App/export/*.ipa
        draft: true
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Clean up keychain and provisioning profile
      if: always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision || true
